module interpreter/objects

imports
	
	include/JasminXT
	interpreter/state
	
rules
	
	step(|state): NEW(cn) -> <alloc(|o) ; next> state
		where
			<init-object> cn => o

	step(|state): GETFIELD(JBCFieldRef(_, fn, _)) -> <pop; push(|v) ; next> state
		where
			<top> state => Ref(r) ;
			<resolve(|r)> state => Object(_, fields) ;
			<lookup> (fn, fields) => v

	step(|state): PUTFIELD(JBCFieldRef(_, fn, _)) -> <pop(|2); update(|r, Object(cn, fields')) ; next> state
		where
			<top(|2)> state => [v, Ref(r)] ;
			<resolve(|r)> state => Object(cn, fields) ;
			<update-key-value(|r, v)> fields => fields'

rules
	
	load-class-file = fail
	
	init-object: "java/lang/Object" -> Object("java/lang/Object", [])
	init-object: cn -> Object(cn, slots)
		where
			<load-class-file> cn => JBCFile(JBCHeader(_, _, JBCClass(_, cn), JBCSuper(sn), _, _, _, _, _, _), fs, _) ;
			<init-object> sn => Object(_, iss) ;
			<map(init-slot)> fs => oss ;
			<conc> (iss, oss) => slots 
			
	init-slot: JBCField(_, fn, JBCFieldDesc(t), _, v) -> (fn, <init-value> (t, v))
	init-slot: JBCExtField(_, fn, JBCFieldDesc(t), _, v, _) -> (fn, <init-value> (t, v))
	
	init-value: (Int(), None()) -> Int("0")
	init-value: (Int(), v) -> Int(v) where <not(eq)> (None(), v)
	
	init-value: (Boolean(), None()) -> Int("0")
	init-value: (Boolean(), v) -> Int(v) where <not(eq)> (None(), v)
	
	init-value: (Array(_), None()) -> Ref(NULL())
	init-value: (Reference(_), None()) -> Ref(NULL())
	