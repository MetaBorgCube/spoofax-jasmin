module binding

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/editor/-
  include/JasminXT


signature
  constructors
    NablNsClass    : Namespace
    NablNsMethod   : Namespace
    NablNsVariable : Namespace
    NablNsLabel    : Namespace


rules

  nabl-get-scope =
    ?JBCFile(
       JBCHeader(
         _
       , _
       , JBCClass(_, c)
       , _
       , _
       , _
       , _
       , _
       , _
       , _
       )
     , _
     , _
     )
    ; ![NablNsMethod()]

  nabl-get-name :
    JBCFile(
      JBCHeader(
        _
      , _
      , JBCClass(_, c)
      , _
      , _
      , _
      , _
      , _
      , _
      , _
      )
    , _
    , _
    ) -> c

  nabl-name-apply(s) =
    JBCFile(
      JBCHeader(
        id
      , id
      , JBCClass(id, s)
      , id
      , id
      , id
      , id
      , id
      , id
      , id
      )
    , id
    , id
    )

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?JBCFile(
       JBCHeader(
         _
       , _
       , JBCClass(_, c)
       , _
       , _
       , _
       , _
       , _
       , _
       , _
       )
     , _
     , _
     )
    ; origin-track-forced(
        JBCFile(
          JBCHeader(
            id
          , id
          , JBCClass(
              id
            , nabl-def(
                ?c-uri1__
              , ?s-uri1__
              | lang__
              , partition__
              , uniques__
              , uri__
              , uri__
              , NablNsClass()
              , Unique()
              , Current()
              , [NablNsMethod()]
              , []
              )
            )
          , id
          , id
          , id
          , id
          , id
          , id
          , id
          )
        , id
        , id
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-get-name :
    JBCSuper(c) -> c

  nabl-name-apply(s) =
    JBCSuper(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?JBCSuper(c)
    ; origin-track-forced(
        JBCSuper(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsClass()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-import-site(|lang__, partition__, uniques__, uris__, states__) =
    ?JBCSuper(c)
    ; origin-track-forced(
        nabl-import(
        | lang__
        , partition__
        , uniques__
        , uris__
        , [ Wildcard(
              [ Import(lang__, NablNsMethod())
              , Import(lang__, Imported(NablNsMethod()))
              ]
            , Context(
                NablNsClass()
              , c
              , []
              , Current()
              )
            , Current()
            , []
            )
          ]
        )
      |
      )

  nabl-get-name :
    CRef(c) -> c

  nabl-name-apply(s) =
    CRef(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?CRef(c)
    ; origin-track-forced(
        CRef(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsClass()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )


rules

  nabl-get-scope =
    ?JBCMethod(_, m, _, _)
    ; ![NablNsLabel(), NablNsVariable()]

  nabl-get-name :
    JBCMethod(_, m, _, _) -> m

  nabl-name-apply(s) =
    JBCMethod(id, s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?JBCMethod(_, m, _, _)
    ; origin-track-forced(
        JBCMethod(
          id
        , nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsMethod()
          , Unique()
          , Current()
          , [NablNsLabel(), NablNsVariable()]
          , []
          )
        , id
        , id
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )


rules

  nabl-get-name :
    JBCVarDecl(n, _, _, _, _) -> n

  nabl-name-apply(s) =
    JBCVarDecl(s, id, id, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?JBCVarDecl(n, _, _, _, _)
    ; origin-track-forced(
        JBCVarDecl(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsVariable()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        , id
        , id
        , id
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-get-name :
    VarNum(n) -> n

  nabl-name-apply(s) =
    VarNum(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?VarNum(n)
    ; origin-track-forced(
        VarNum(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsVariable()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )


rules

  nabl-get-name :
    JBCLabel(l) -> l

  nabl-name-apply(s) =
    JBCLabel(s)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?JBCLabel(l)
    ; origin-track-forced(
        JBCLabel(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsLabel()
          , Unique()
          , Current()
          , []
          , []
          )
        )
        ; match(child-uris__|c-uri1__)
        ; match(sibl-uris__|s-uri1__)
        ; match(implicits__|[])
      |
      )

  nabl-get-name :
    LabelRef(l) -> l

  nabl-name-apply(s) =
    LabelRef(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?LabelRef(l)
    ; origin-track-forced(
        LabelRef(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsLabel()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )