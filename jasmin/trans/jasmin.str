module jasmin

imports
  libstratego-lib
  libstratego-gpp
  libstratego-aterm

imports

  libspoofax/core/language

  runtime/analysis/-
  runtime/nabl/-
  runtime/task/-
  runtime/index/-
  runtime/properties/-
  runtime/types/-
  libspoofax/sdf/pp

  JasminXT-Extra-PP-Rules.pp
  pp/-
  outliner

imports

	signatures/-

	names/analysis/names/binding
	analysis/names/check
	analysis/names/project
	// analysis/names/-
	// analysis/types/-
	// analysis/types/next-instr/-
	// analysis/types/pop-types/-
	// analysis/types/push-types/-
	analysis/desugar
	editor/builders


rules // Analysis

  editor-analyze = analyze-all(desugar-all, id, id|<language>)

rules // Editor services

  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  editor-resolve:
    (node, position, ast, path, project-path) -> definition
    where
      definition := <analysis-resolve(|<language>, project-path)> node

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) -> <get-type> target

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
      proposals := <analysis-propose-completions(|<language>, project-path)> ast

// rules // Constraints
//
//   debug-collect-file-constraints:
//   	(selected, position, ast, path, project-path) -> (filename, result)
//     where
//       index-setup(|<language>, project-path);
//       task-setup(|project-path);
//       partition   := $[[project-path]/[path]];
//       filename := <guarantee-extension(|"generated.constraints")> path;
//       JBCFile(_, _, methods) := selected;
//       result   := <map(stack-constraints(|partition, <class-name> selected))> methods
//
//   debug-collect-solve-constraints:
//   	(selected, position, ast, path, project-path) -> (filename, result)
//     where
//       index-setup(|<language>, project-path);
//       task-setup(|project-path);
//       partition   := $[[project-path]/[path]];
//       JBCFile(_, _, methods) := selected;
//       method_constraints   := <map(stack-constraints(|partition, <class-name> selected))> methods;
//       filename := <guarantee-extension(|"generated.solution")> path;
//       result := <map(try(solve-constraints))> method_constraints
//
//    debug-solve-test-constraints:
//   	(selected, position, ast, path, project-path) -> (filename, result)
//     where
//       filename := <guarantee-extension(|"generated.test")> path;
//       result   := <solve-test-constraints>

rules // Debugging

  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected

  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed-selection:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := selected

  debug-show-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := ast

  debug-project =
    analysis-debug-project(|<language>)

  debug-partition =
    analysis-debug-partition(|<language>)

  debug-index-partition =
    analysis-debug-index-partition(|<language>)

  debug-index-project =
    analysis-debug-index-project(|<language>)

  debug-task-project =
    analysis-debug-task-project(|<language>)

  debug-task-partition =
    analysis-debug-task-partition(|<language>)

  debug-task-selection =
    analysis-debug-task-selection(|<language>)
