module JasminXT-Extra-PP-Rules.pp

imports
  signatures/-    // jasmin AST nodes
  libspoofax/sdf/pp // pp-* strategies
  libstratego-gpp     // box language AST nodes
  pp/JasminXT-Descriptors-pp
  pp/JasminXT-Names-pp
  pp/JasminXT-Types-pp

rules
  
  editor-show-formatted:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"pp.j")> path;
      result   := <pp-Jasmin-string> selected
  
  pp-Jasmin-string =
    prettyprint-SDF-start-symbols
    ; !V([], <id>)
    ; box2text-string(|120)
 
// "(" <ParameterDescriptor-CF>* ")" <ReturnDescriptor-CF> -> <MethodDescriptor-CF> {"JBCMethodDesc"}
  prettyprint-MethodDescriptor:
    JBCMethodDesc(pd*, rd) -> [ H(
                                  [SOpt(HS(), "0")]
                                , [S("(")
                                  , pd'
                                  , S(")")
                                  , rd'
                                  ]
                                )
                              ]
    where pd' := <pp-H-list(prettyprint-jasmin-ParameterDescriptor|" ")> pd*
        ; rd' := <pp-one-Z(prettyprint-jasmin-ReturnDescriptor)> rd
// "L" <ClassRef-CF> ";" -> <ObjectType-CF> {"Reference"}
  prettyprint-ObjectType:
    Reference(cr) -> [ H(
                         [SOpt(HS(), "0")]
                       , [S("L")
                         , cr'
                         , S(";")
                         ]
                       )
                     ]
    where cr' := <pp-one-Z(prettyprint-jasmin-ClassRef)> cr
// "[" <ComponentType-CF> -> <ArrayType-CF>  {"Array"}
  prettyprint-ArrayType:
    Array(ct) -> [ H(
                     [SOpt(HS(), "0")]
                   , [S("[")
                     , ct'
                     ]
                   )
                 ]
    where ct' := <pp-one-Z(prettyprint-jasmin-ComponentType)> ct
// <ClassRef-CF> "/" <FRef-CF> <LAYOUT?-CF> <FieldDescriptor-CF>  -> <FieldRef-CF>  {"JBCFieldRef"}
  prettyprint-FieldRef:
    JBCFieldRef(cr, fr, fd) -> [ H(
                                 [SOpt(HS(), "0")]
                                 , [ cr'
                                   , S("/")
                                   , fr'
                                   , fd'
                                   ]
                                 )
                               ]
    where cr' := <pp-one-Z(prettyprint-jasmin-ClassRef)> cr
        ; fr' := <pp-one-Z(prettyprint-jasmin-FRef)> fr
        ; fd' := <pp-one-Z(prettyprint-jasmin-FieldDescriptor)> fd
// <ClassRef-CF> "/" <MRef-CF> <LAYOUT?-CF> <MethodDescriptor-CF> -> <MethodRef-CF> {"JBCMethodRef"}
  prettyprint-MethodRef:
    JBCMethodRef(cr, mr, md) -> [ H(
                                 [SOpt(HS(), "0")]
                                 , [ cr'
                                   , S("/")
                                   , mr'
                                   , md'
                                   ]
                                 )
                               ]
    where cr' := <pp-one-Z(prettyprint-jasmin-ClassRef)> cr
        ; mr' := <pp-one-Z(prettyprint-jasmin-MRef)> mr
        ; md' := <pp-one-Z(prettyprint-MethodDescriptor)> md