module editor/builders

imports
	analysis/names/project	
	syntax/ASM
	trans/translator/-
	
rules
	
	generate-class:
		(selected, position, ast, path, project-path) -> None()
		where
		    asm-ast@ASMClass(_, _, class-name, _, _, _, _, _) := <jasmin-file-to-asm-class> ast;
		    path-init* := <string-tokenize(|['/','\']); init> path;
		    path-end* := [class-name];
		    path' := <separate-by(|"/");concat-strings> [path-init*, path-end*];
			filename := <guarantee-extension(|"class")> path'
		where
			<write-class-file(|filename)> asm-ast;
			result := None()
			
	translate-class:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"asm.aterm")> path
		where
			result := <jasmin-file-to-asm-class> ast
			
	execute-class:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"result.txt")> path
		with
			cname := <class-name ; string-replace(|"/",".")> ast;
			cpath := <concat-strings; prim("local_path")> [project-path, "/", <dirname> path];
			<execute-java(|cpath); process-output> cname => result
	
	generate-and-execute-class:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
		    asm-ast@ASMClass(_, _, class-name, _, _, _, _, _) := <jasmin-file-to-asm-class> ast;
		    path-init* := <string-tokenize(|['/','\']); init> path;
		    path-end* := [class-name];
		    path' := <separate-by(|"/");concat-strings> [path-init*, path-end*];
			class-filename := <guarantee-extension(|"class")> path';
			filename := <guarantee-extension(|"result.txt")> path
		with
			<write-class-file(|class-filename)> asm-ast;
			cname := <class-name ; string-replace(|"/",".")> ast;
			cpath := <concat-strings; prim("local_path")> [project-path, "/", <dirname> path];
			<execute-java(|cpath); process-output> cname => result
			
				
		
	
	process-output: Output(result, "") -> result

	process-output: Output(result, error) -> $[[result] Runtime error: [error]]
		where not (<?""> error)
		
signature constructors
	
	Output: String * String -> Term

strategies
	
	external execute-java(|path)
	external write-class-file(|fname)
